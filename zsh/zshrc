###############################################################################
# Prompt                                                                      #
###############################################################################

NL=$'\n'
if [[ `whoami` == 'root' ]]
then
    PROMPT="%F{red}%n@%m %F{blue}%~ %#%f "
else
    PROMPT="%F{green}%n@%m %F{blue}%~${NL}%#%f "
fi

SESSION_TYPE="native"
if [[ `systemd-detect-virt` =~ ^lxc.* ]]
then
    SESSION_TYPE="lxc"
elif [[ -n $SSH_CLIENT ]]
then
    SESSION_TYPE="ssh"
fi

if [[ $SESSION_TYPE == "lxc" ]]
then
  PROMPT="%F{red}LXC%F{blue} - "$PROMPT
elif [[ $SESSION_TYPE == "ssh" ]]
then
  PROMPT="%F{red}SSH%F{blue} - "$PROMPT
fi

# Git / SVN
# from: https://stackoverflow.com/a/1128583
setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' actionformats \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats       \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'

zstyle ':vcs_info:*' enable git cvs svn

# or use pre_cmd, see man zshcontrib
vcs_info_wrapper() {
  vcs_info
  if [ -n "$vcs_info_msg_0_" ]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}$del"
  fi
}
RPROMPT=$'$(vcs_info_wrapper)'

###############################################################################
# Completion                                                                  #
###############################################################################

autoload -U compinit
compinit
zstyle ':completion:*:descriptions' format '%d'
zstyle ':completion:*:warnings' format 'Sorry, no matches for: %d'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh_cache
zmodload zsh/complist
setopt extendedglob
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=36=31"

function _lxc-start() {
  compadd `lxc-ls`
}
compdef _lxc-start lxc-start

function _lxc-stop() {
  compadd `lxc-ls --running`
}
compdef _lxc-stop lxc-stop

_totp() {
    local IFS=$'\n'
    local prefix
    _arguments : \
        "-c[put it on the clipboard]" \
        "--clip[put it on the clipboard]"
    zstyle -s ":completion:${curcontext}:" prefix prefix || prefix="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
    _values -C 'passwords' ${$(find -L "$prefix" \( -name .git -o -name .gpg-id \) -prune -o $@ -print 2>/dev/null     | sed -e "s#${prefix}/\{0,1\}##" -e 's#\.gpg##' -e 's#\\#\\\\#g' -e 's#:#\\:#g' | sort):-""}
}
compdef _totp totp

###############################################################################
# Env variables                                                               #
###############################################################################

export EDITOR=/usr/bin/vim
export SVN_EDITOR=vim

###############################################################################
# Aliases                                                                     #
###############################################################################

alias ls='ls --color -lh'
alias la='ls --color -lah'
alias h='history'
alias grep='grep --color=auto'
alias vi='/usr/bin/vim'

###############################################################################
# History                                                                     #
###############################################################################

HISTFILE=~/.zsh_cache/history
HISTSIZE=10000
SAVEHIST=10000
export HISTFILE SAVEHIST
setopt HIST_IGNORE_ALL_DUPS
setopt APPEND_HISTORY
#setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt hist_ignore_space

###############################################################################
# Shortcuts                                                                   #
###############################################################################

typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     history-search-backward
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   history-search-forward
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

################################################################################
# Functions                                                                    #
################################################################################

# To reduce PDF size (especially scanned documents)
function reducePdf () {
    pdf2ps $1 $1.ps;
    ps2pdf $1.ps $1;
    rm $1.ps;
}

# get totp from pass
function totp() {
    totp=`pass $1 | grep "totp:" | awk -F ':' '{print $2}'`
    oathtool --base32 --totp ${totp}
}

